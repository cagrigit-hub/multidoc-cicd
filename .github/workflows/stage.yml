name: Stage - Deploy to AWS

env:
  APP_NAME: Multidoc-cicd
  ENV_NAME: Multidoc-cicd-env
  S3_BUCKET: cakitomakitocicd-bucket
  AWS_REGION: eu-central-1 #can be changed to your own aws region
  AWS_PLATFORM: Docker
  PIPELINE_ID: ${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}

on:
  push:
    branches: [ main ]

jobs:
  # Docker build 3 folders -> api, nginx, web with name tag and push to dockerhub
  build_docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push api
        uses: docker/build-push-action@v2
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/multidoc-backend:latest
      - name: Build and push web
        uses: docker/build-push-action@v2
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/multidoc-web:latest
      - name: Build and push nginx
        uses: docker/build-push-action@v2
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/multidoc-nginx:latest


  create_eb_version:
    needs: [build_docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - run: |
          AWS_VERSION_LABEL=${{env.APP_NAME}}-${{env.PIPELINE_ID}}

          echo "Creating Source Bundle"
          zip -r ${{env.APP_NAME}}.zip ./docker-compose.yaml 
          S3_KEY="$AWS_VERSION_LABEL.zip"

          echo "Uploading Source Bundle to S3"
          aws s3 cp ${{env.APP_NAME}}.zip s3://${{env.S3_BUCKET}}/${S3_KEY} --region ${{env.AWS_REGION}}

          echo "Creating Elastic Beanstalk version"
          aws elasticbeanstalk create-application-version --application-name ${{env.APP_NAME}} --version-label $AWS_VERSION_LABEL --region ${{env.AWS_REGION}} --source-bundle S3Bucket=${{env.S3_BUCKET}},S3Key=${S3_KEY} --auto-create-application

  deploy_aws:
    needs: [create_eb_version]
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.10.10 (needed for eb cli)
        uses: actions/setup-python@v1
        with:
          python-version: "3.10.10"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-id: ${{ secrets.AWS_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - run: |
          AWS_VERSION_LABEL=${{env.APP_NAME}}-${{env.PIPELINE_ID}}

          echo "Installing Elastic Beanstalk Cli"
          python -m pip install --upgrade pip
          pip install awsebcli --upgrade
          eb --version

          echo "eb init"
          eb init ${{env.APP_NAME}} -p ${{env.AWS_PLATFORM}} --region ${{env.AWS_REGION}}
          echo "eb deploy"
          eb deploy ${{env.ENV_NAME}} --version $AWS_VERSION_LABEL --timeout 20
          echo "Deploy finished"
